# Laptop Price Prediction

This project aims to predict the prices of laptops based on their hardware specifications using machine learning. The project walks through data analysis, model building, and deploying a predictive model as a web application using Streamlit.

## Project Overview

In this project, we analyze a dataset containing various laptop features such as RAM, storage (ROM), CPU, and GPU. Through **Exploratory Data Analysis (EDA)**, we investigate the relationships between these features and the target variable, which is the laptop price.

After performing EDA, we train different machine learning models and evaluate their performance in predicting laptop prices. The best-performing model is then deployed as a web application using **Streamlit**. This app allows users to input laptop specifications and get an estimated price.

### Key Components
1. Data Collectio*: The dataset contains several features about laptops, including:
    - RAM (in GB)
    - Storage (ROM in GB)
    - Processor (CPU brand, model, speed)
    - Display Size
    - Operating System
    - Brand
    - Laptop Name, etc.

2. Exploratory Data Analysis (EDA): We visualize and analyze trends and relationships between laptop hardware specifications and price. This step helps us understand which features most impact the price.

3. Model Building

For building and training the machine learning models, we utilized several key libraries and frameworks:

Pandas: For data manipulation and preprocessing
Scikit-learn: For model training, pipeline creation, and evaluation
ColumnTransformer: To apply transformations to specific columns
LabelEncoder: For encoding categorical variables
StandardScaler: To standardize numerical features
OneHotEncoder: For handling categorical variables
Pipeline: To streamline the preprocessing and modeling process
Train_test_split: To split the data into training and testing sets
R2_score: For evaluating the performance of the models
RandomForestRegressor: For training a random forest regression model
LinearRegression: For building a linear regression model
XGBoost (XGBRegressor): For training a gradient boosting regression model
Support Vector Regressor (SVR): For creating a support vector regression model
Joblib: For saving and loading trained models

Each of the models was trained using a combination of preprocessing pipelines and hyperparameter tuning. The models were evaluated based on their R-squared (R²) score, and the best-performing model was selected for deployment, in our case it was Linear Regressor with r2 score of 0.87

4. Web Application: The model is deployed as a web app using Streamlit, where users can input laptop specifications to predict the price in real-time.

## Tech Stack

- **Python** for data preprocessing, model training, and evaluation
- **Pandas**, **Numpy** for data manipulation
- **Matplotlib**, **Seaborn** for data visualization during EDA
- **Scikit-learn** for machine learning model building
- **Streamlit** for deploying the web application

## Model Evaluation

Each machine learning model was evaluated based on its prediction accuracy and other performance metrics such as **Root Mean Squared Error (RMSE)**. The model with the lowest RMSE was chosen for deployment.

It looks like you're providing input features for the web application form, and this seems to be a structure for users to input laptop specifications. Based on this, here’s how these input features could be organized in your project README file under the **Web Application** section:

---

## Web Application

The web app built with **Streamlit** allows users to input laptop specifications to estimate the price. Below are the input features available in the app:

### Input Features

1. **Select Brand**
   - Example: HP, Dell, Apple, etc.

2. **Enter Laptop Name**
   - Example: *Victus 15-fb0157AX Gaming Laptop*

3. **Select Processor**
   - Example: *5th Gen AMD Ryzen 5 5600H*, *Intel Core i7*

4. **Select CPU**
   - Example: *Hexa Core, 12 Threads*, *Quad Core*

5. **Select RAM**
   - Example: 8GB, 16GB, 32GB

6. **Select RAM Type**
   - Example: *DDR4*, *DDR5*

7. **Select Storage**
   - Example: *512GB*, *1TB*

8. **Select Storage Type**
   - Example: *SSD*, *HDD*

9. **Select GPU**
   - Example: *NVIDIA GeForce GTX 1650*, *AMD Radeon*

10. **Select Display Size**
    - Example: *15.6 inches*, *17.3 inches*

11. **Enter Resolution Width**
    - Example: *1920* (for Full HD)

12. **Enter Resolution Height**
    - Example: *1080* (for Full HD)

13. **Select Operating System**
    - Example: *Windows 10*, *Windows 11*, *Linux*, *macOS*

14. **Select Warranty**
    - Example: *1 year*, *2 years*, *3 years*

Once the user fills out these input fields, the model will predict the estimated price of the laptop based on the specified hardware configurations.

## Future Enhancements

- Additional Features: Include more features like battery life, display quality, etc.
- Real-time Data Updates: Use a live dataset for continuous updates.
- More Advanced Models: Implement deep learning models or ensemble methods to improve predictions.

## Contributing

Feel free to fork this project, make your changes, and submit a pull request. All contributions are welcome!

Let me know if you'd like any additional customization!
